from __future__ import absolute_import
from datetime import date, datetime
from typing import List, Dict

{# dependencies #}
{% for file_name, class_name in dependencies.items() %}
from models.{{file_name}} import {{class_name}}
{% endfor %}
from models.base_model_ import Model
import util

{# classes template #}
class {{name}}(Model):
    def __init__(self,{% for property_name, property_type in properties.items() %} {{property_name}}: {{property_type}}=None{%if not loop.last %},{% endif %}{% endfor %}):
        self.swagger_types = {
        {% for property_name, property_type in properties.items() %}
         '{{property_name}}': {{property_type}}{%if not loop.last %},{% endif %}

        {% endfor %}
        }

        self.attribute_map = {
        {% for property_name, property_type in properties.items() %}
         '{{property_name}}': {{property_name}}{%if not loop.last %},{% endif %}

        {% endfor %}
        }

        {% for property_name, property_type in properties.items() %}
        self._{{property_name}} = {{property_name}}
        {% endfor %}


    @classmethod
    def from_dict(cls, dikt) -> '{{name}}':
        return util.deserialize_model(dikt, cls)
    
    {% for property_name, property_type in properties.items() %}
    @property
    def {{property_name}}(self) -> '{{property_type}}':
        return self._{{property_name}}

    @{{property_name}}.setter
    def {{property_name}}(self, {{property_name}}: {{property_type}}):
        self._{{property_name}} = {{property_name}}
    {% endfor %}


