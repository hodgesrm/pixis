{% include "templates/lib.tmpl" %}


{% include "templates/models_dep.tmpl" %}

{# classes template #}
class {{name}}(Model):
    {# {% for property in properties %} {{property.name}}: {{property.type}}{%if not loop.last %},{% endif %}{% endfor %} #}
    def __init__(self,{% for property in properties %} {{property.name}}: {{property.type}}{%if not loop.last %},{% endif %}{% endfor %}):
        self.swagger_types = {
        {% for property in properties %}
         '{{property.name}}': {{property.type}}{%if not loop.last %},{% endif %}

        {% endfor %}
        }

        self.attribute_map = {
        {% for property in properties %}
         '{{property.name}}': {{property.name}}{%if not loop.last %},{% endif %}

        {% endfor %}
        }

        {% for property in properties %}
        self._{{property.name}} = {{property.name}}
        {% endfor %}


    @classmethod
    def from_dict(cls, dikt) -> '{{name}}':
        return util.deserialize_model(dikt, cls)
    
    {% for property in properties %}
    @property
    def {{property.name}}(self) -> '{{property.type}}':
        return self._{{property.name}}

    @{{property.name}}.setter
    def {{property.name}}(self, {{property.name}}: {{property.type}}):
        self._{{property.name}} = {{property.name}}
    {% endfor %}


