import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import '../rxjs-operators';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { CustomHttpUrlEncodingCodec } from '../encoder';

{% for dependency in dependencies %}
import { {{dependency[0]}} } from '../model/{{dependency[1]}}';
{% endfor %}

@Injectable()
export class {{ schema_name|capitalize }}Service {

    protected basePath = '{{base_path}}' ;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }


    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    {% for path in paths_list %}
    public {{path['properties'].operationId}}({% for param in path['properties'].parameters %}{{param.name}}{% if not param.required %}?{% endif %}: {{param_to_type[param.name]}}{% if not loop.last %},{% endif %}{% endfor %}): Observable<{{observable}}> {
        {% for param in path['properties'].parameters %}
        {% if param.required %}
        if ({{param.name}} === null || {{param.name}} === undefined) {
            throw new Error('Required parameter {{param.name}} was null or undefined when calling {{path['properties'].operationId}})
        }
        {% endif %}
        {% endfor %}

        {% if in == 'query'%}
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        {% for param in path['properties'].parameters %}
        {% if param._in == 'query'%}
        {% if param_to_short_type[param.name] == 'array' %}
        if ({{param.name}}) {
            {{param.name}}.forEach((element) => {
                queryParameters = queryParameters.append('status', <any>element);
            })
        }
        {% endif %}
        {% if not param_to_short_type[param.name] == 'array' %}
        if ({{param.name}} !== undefined) {
            queryParameters = queryParameters.set('{{param.name}}, <any>{{param.name}});
        }
        {% endif %}
        {% endif %}
        {% endfor %}

        let headers = this.defaultHeaders;
        {% for param in path['properties'].parameters %}
        {% if param._in == 'header' %}
        if ({{param.name}} !== undefined && {{param.name}} !== null) {
            headers = headers.set('{{param.name}}', String({{param.name}}));
        }
        {% endif %}
        {% endfor %}


        // to determine the Accept header
        let httpHeaderAccepts: string[] = 
            {% for content in path['contents'] %}
            '{{ content }}'{% if not loop.last %},{% endif %}
            {% endfor %}
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            {% for responseBody in path['responseBodies'] %}
            '{{ responseBody }}'{% if not loop.last %},{% endif %}
            {% endfor %}
        ];
        {% if path['method'] == 'post' or path['method'] == 'put' %}
        let httpContentTypeSelected: string = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }
        {% endif %}

        const canConsumeForm = this.canConsumeForm(consumes);

        {% if CONDITION%}
        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        {% if CONDITION %}
        useForm = canConsumeForm;
        {% endif %}
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        }
        {% for param in path['properties'].parameters %}
        if ({{param.name}} !== undefined) {
            formParams = formParams.append('{{param.name}}', <any>{{param.name}}) || formParams;
        }
        {% endfor %}
        {% endif %}


        return this.httpClient.delete<any>(`${this.basePath}/pet/${encodeURIComponent(String(petId))}`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );

        return this.httpClient.{{path.method}}<any>(`${this.basePath}/{{SOME PATH THING?}}`,
            {% if %}
            convertFormParamsToString ? formParams.toString() : formParams, 
            {% endif %}
            {
                {% if in == 'query' %}
                params: queryParameters,
                {% endif %},
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        ;)
    }
    {% endfor %}
}