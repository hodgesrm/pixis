{% include "dep.tmpl" %}


@Injectable() 
export class {{ tag|capitalize }}Api {
	private basePath = '{{basePath}}'
	public defaultHeaders: Headers = new Headers();
	public configuration: Configuration = new Configuration();

	 constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
{% for path in paths %} 
	public {{path['properties'].operationId}}( {{path.parameters}}  , extraHttpRequestParams?: any): Observable<{}> {
        return this.{{path['properties'].operationId}}WithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }
{% endfor %}

{% for path in paths %}
	public {{path['properties'].operationId}}WithHttpInfo( {{path.parameters}}, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + {{path['url']}}

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON());
        
        if ({{path.parameters}} === null || {{path.parameters}} === undefined) {
            throw new Error('Required parameter {{path.parameters}} was null or undefined when calling path['properties'].operationId.');
        }
        
        let consumes: string[] = [
        ];

        
        let produces: string[] = [
            'application/json',
            'application/xml'
        ];

        
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.{{path['method']|capitalize}},
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }

{% endfor %}

}
